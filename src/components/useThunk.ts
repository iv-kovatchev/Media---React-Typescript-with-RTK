import { useCallback, useState } from 'react';import { useDispatch } from 'react-redux';type UseThunkReturn = [  (args?: string) => void, boolean, string | null]const useThunk = (thunk: any):UseThunkReturn => {  const [isLoading, setIsLoading] = useState(false);  const [error, setError] = useState<string | null>(null);  const dispatch = useDispatch();  const runThunk = useCallback((args?: string) => {    setIsLoading(true);    dispatch(thunk(args))      .unwrap()      .catch((err: string) => setError(err))      .finally(() => setIsLoading(false))  }, [dispatch, thunk]);  return [runThunk, isLoading, error];}export default useThunk;
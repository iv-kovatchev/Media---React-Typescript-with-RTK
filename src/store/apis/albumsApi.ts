import { createApi, fetchBaseQuery, TagDescription } from '@reduxjs/toolkit/query/react';import { User } from '../types';import { faker } from '@faker-js/faker';import { pause } from '../thunks/utils';export interface Album {  id: string;  title: string;  userId: string;}const albumsApi = createApi({  reducerPath: 'albums',  tagTypes: ['Album', 'UsersAlbums'],  baseQuery: fetchBaseQuery(    {      baseUrl: 'http://localhost:8081',      fetchFn: async (...args) => {        //Remove for production!!!        await pause(1500);        return fetch(...args);      }    }),  endpoints: (build) => ({    fetchAlbums: build.query<Album[], User>({      query: (user: User) => ({        url: '/albums',        params: {          userId: user.id        },        method: 'GET'      }),      providesTags: (result, error, arg) => {        const tags: TagDescription<'Album' | 'UsersAlbums'>[] = [{ type: 'UsersAlbums', id: arg.id} ];        result?.map(album => tags.push({ type: 'Album', id: album.id }))        return tags;      }    }),    addAlbum: build.mutation<Album, Partial<User>>({      query: ({ id }) => ({        url: 'albums',        method: 'POST',        body: {          userId: id,          title: faker.commerce.productName()        }      }),      invalidatesTags: (result, error, arg) => {        return [{ type: 'UsersAlbums', id: arg.id }]      },      // queryFn: async (args) => {      //   return await pause(1500);      // }    }),    deleteAlbum: build.mutation<{ success: boolean; id: string }, Album>({      query: (album) => ({        url: `albums/${album.id}`,        method: 'DELETE'      }),      invalidatesTags: (result, error, arg) => {        console.log(result);        return [{ type: 'Album', id: arg.id }];      }    })  })});export const {  useFetchAlbumsQuery,  useAddAlbumMutation,  useDeleteAlbumMutation } = albumsApi;export { albumsApi };
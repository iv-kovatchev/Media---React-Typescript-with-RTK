import { createApi, fetchBaseQuery, TagDescription } from '@reduxjs/toolkit/query/react';import { Album } from './albumsApi';import { faker } from '@faker-js/faker';import { pause } from '../thunks/utils';export interface Photo {  id: string;  url: string;  albumId: string;}const photosApi = createApi({  reducerPath: 'photos',  tagTypes: ['AlbumPhotos', 'Photo'],  baseQuery: fetchBaseQuery({    baseUrl: 'http://localhost:8081',    fetchFn: async (...args) => {      //Remove for production!!!      await pause(1500);      return fetch(...args);    }  }),  endpoints: (build) => ({    fetchPhotos: build.query<Photo[], Album>({      query: (album: Album) => ({        method: 'GET',        url: '/photos',        params: {          albumId: album.id,        }      }),      providesTags: (result, error, arg) => {        const tags: TagDescription<'Photo' | 'AlbumPhotos'>[] = [{ type: 'AlbumPhotos', id: arg.id }]        result?.map((photo) => tags.push({ type: 'Photo', id: photo.id }));        return tags;      }    }),    addPhoto: build.mutation<Photo, Partial<Album>>({      query: (album) => ({        method: 'POST',        url: '/photos',        body: {          albumId: album.id,          url: faker.image.abstract(150, 150, true)        },      }),      invalidatesTags: (result, error, arg, meta) =>        [{ type: 'AlbumPhotos', id: arg.id }]    }),    removePhoto: build.mutation<{ success: boolean, id: string }, Photo>({      query: (photo) => ({        method: 'DELETE',        url: `/photos/${photo.id}`      }),      invalidatesTags: (result, error, arg) => {        console.log(result?.success);        return [{ type: 'Photo', id: arg.id }]      }    })  })})export const {  useFetchPhotosQuery,  useAddPhotoMutation,  useRemovePhotoMutation} = photosApi;export { photosApi };
import { createSlice, SerializedError } from '@reduxjs/toolkit';import { fetchUsers } from '../thunks/fetchUsers';import { User } from '../types';import { addUser } from '../thunks/addUser';import { deleteUser } from '../thunks/deleteUser';interface UsersStateProps {  data: User[],  isLoading: boolean,  error: SerializedError | null}const initialState: UsersStateProps = {  data: [],  isLoading: false,  error: null}const usersSlice = createSlice({  name: 'users',  initialState,  reducers: {  },  extraReducers: (builder) => {    builder      .addCase(fetchUsers.pending, (state, action) => {        state.isLoading = true;    })    builder      .addCase(fetchUsers.fulfilled, (state, action) => {        state.isLoading = false;        state.data = action.payload    })    builder      .addCase(fetchUsers.rejected, (state, action) => {        state.isLoading = false;        state.error = action.error    })    builder      .addCase(addUser.pending, (state, action) => {        state.isLoading = true;      })    builder      .addCase(addUser.fulfilled, (state, action) => {        state.isLoading = false;        state.data.push(action.payload);      })    builder      .addCase(addUser.rejected, (state, action) => {        state.isLoading = false;        state.error = action.error      })    builder      .addCase(deleteUser.pending, (state, action) => {        state.isLoading = true;      })    builder      .addCase(deleteUser.fulfilled, (state, action) => {        state.isLoading = false;        state.data = state.data.filter((user) => user.id !== action.payload)      })    builder      .addCase(deleteUser.rejected, (state, action) => {        state.isLoading = false;        state.error = action.error      })  }});export const usersReducer = usersSlice.reducer;